import{_ as e,M as t,p,q as c,R as n,t as s,N as o,a1 as l}from"./framework-5866ffd3.js";const i={},u=n("h1",{id:"javascript-开发注意事项",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-开发注意事项","aria-hidden":"true"},"#"),s(" JavaScript 开发注意事项")],-1),r={href:"https://segmentfault.com/a/1190000012730162",target:"_blank",rel:"noopener noreferrer"},d=l(`<ul><li>立即执行函数 <ul><li>常见写法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前置<code>void</code>写法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前置<code>!</code>写法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>判断变量是否为对象，先判断其值是否为<code>null</code>，因为：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>所以判断对象的写法：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>someVal <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> someVal <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// someVal 是一个对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>判断小数是否相等，请使用相减取绝对值的方式（表示两数相差在一定范围内即认为他们相等），因为：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>相减取绝对值比较方法：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1e-10</span><span class="token punctuation">;</span> <span class="token comment">// true 1e-10表示1*10^-10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>字符转换为整数 <ul><li><code>parseInt(parm1, parm2)</code>,<code>parm1</code>为字符串（如果不是字符串则会首先转换为字符串），<code>parm2</code>为进制数，如果不传第二个参数，则进制由第一个参数决定。比如以 0x 开头的字符串，会被解析为 16 进制数，IE8 和一批老 Android 浏览器：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;011&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>==不要使用 parseInt 给小数取整== 假如第一个参数不是字符串，可能导致以下情况：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.0000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token comment">//0.0000008会先被转为字符串</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">0.0000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;8e-7&#39;</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;8e-7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1);function k(v,m){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("参考文章 "),n("a",r,[s("JavaScript 的常见注意点"),o(a)])]),d])}const g=e(i,[["render",k],["__file","JavaScript开发注意事项.html.vue"]]);export{g as default};
