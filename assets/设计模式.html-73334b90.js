import{_ as e,p as a,q as d,a1 as o}from"./framework-5866ffd3.js";const c={},i=o('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><h2 id="什么是设计模式" tabindex="-1"><a class="header-anchor" href="#什么是设计模式" aria-hidden="true">#</a> 什么是设计模式？</h2><p>设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。</p><h2 id="设计几个原则" tabindex="-1"><a class="header-anchor" href="#设计几个原则" aria-hidden="true">#</a> 设计几个原则</h2><p>单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则</p><h2 id="常见的设计模式及实际案例" tabindex="-1"><a class="header-anchor" href="#常见的设计模式及实际案例" aria-hidden="true">#</a> 常见的设计模式及实际案例</h2><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><blockquote><p>单例模式 （Singleton Pattern）又称为单体模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。也就是说，第二次使用同一个类创建新对象的时候，应该得到与第一次创建的对象完全相同的对象。</p></blockquote><h4 id="例子-1-element-ui-全屏loading服务形式注册的使用方式" tabindex="-1"><a class="header-anchor" href="#例子-1-element-ui-全屏loading服务形式注册的使用方式" aria-hidden="true">#</a> 例子 1：Element-UI 全屏<code>Loading</code>服务形式注册的使用方式</h4><p>用服务方式使用全屏<code>Loading</code>是单例的，即在前一个全屏<code>Loading</code>关闭前再次调用全屏 <code>Loading</code>，并不会创建一个新的<code>Loading</code>实例，而是返回现有全屏<code>Loading</code>的实例。</p><h4 id="例子-2-vuex" tabindex="-1"><a class="header-anchor" href="#例子-2-vuex" aria-hidden="true">#</a> 例子 2：Vuex</h4><p><code>Vuex</code>是一个专为 Vue.js 应用程序开发的状态管理模式。<code>Vuex</code>，它们都实现了一个全局的 <code>Store</code>用于存储应用的所有状态。这个<code>Store</code>的实现，正是单例模式的典型应用。</p><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h3><blockquote><ul><li>工厂模式就是根据不用的输入返回不同的实例，一般用来创建同一类对象，它的主要思想就是将对象的创建与对象的实现分离。</li><li>在创建对象时，不暴露具体的逻辑，而是将逻辑封装在函数中，那么这个函数就可以被视为一个工厂。工厂模式根据抽象程度的不同可以分为：简单工厂、工厂方法、抽象工厂。</li></ul></blockquote>',14),r=[i];function h(n,t){return a(),d("div",null,r)}const s=e(c,[["render",h],["__file","设计模式.html.vue"]]);export{s as default};
