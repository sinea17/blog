import{_ as p,M as o,p as l,q as c,R as s,t as n,N as t,a1 as a}from"./framework-5866ffd3.js";const i={},r=s("h1",{id:"使用-express-mongodb-搭建多人博客",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-express-mongodb-搭建多人博客","aria-hidden":"true"},"#"),n(" 使用 Express+MongoDB 搭建多人博客")],-1),u={href:"https://github.com/nswbmw/N-blog",target:"_blank",rel:"noopener noreferrer"},k=s("h3",{id:"node-js-知识点讲解",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#node-js-知识点讲解","aria-hidden":"true"},"#"),n(" Node.js 知识点讲解")],-1),d=a("<li>require <ul><li>require 可加载 .js、.json 和 .node 后缀的文件</li><li>require 的过程是同步的</li><li>require 目录的机制:package.json(含 main 字段)-&gt;index.js/index.node</li><li>require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载</li><li>判断是否是程序的入口文件有两种方式: <ul><li>require.main === module（推荐）</li><li>module.parent === null</li></ul></li><li>循环引用：循环引用并不会报错，引用的对象未初始化好，只能拿到初始值空对象 <code>{}</code>，解决办法： <ul><li>分离共用的代码</li><li>不在最外层 require，在用到的地方 require，通常在函数的内部</li></ul></li></ul></li><li>exports 和 module.exports <ul><li>module.exports 初始值为一个空对象 {}</li><li>exports 是指向的 module.exports 的引用</li><li>require() 返回的是 module.exports 而不是 exports</li></ul></li>",2),v={href:"https://github.com/nswbmw/N-blog/blob/master/book/2.3%20Promise.md",target:"_blank",rel:"noopener noreferrer"},m=a("<li>npm（第三种方式将固定版本号写入，建议线上的 Node.js 应用都采取这种锁定版本号的方式，但只针对最外层依赖） <ul><li><code>npm i express --save</code>/<code>npm i express -S</code> (安装 express，同时将 &quot;express&quot;: &quot;^4.14.0&quot; 写入 dependencies )</li><li><code>npm i express --save-dev</code>/<code>npm i express -D</code> (安装 express，同时将 &quot;express&quot;: &quot;^4.14.0&quot; 写入 devDependencies )</li><li><code>npm i express --save --save-exact</code> (安装 express，同时将 &quot;express&quot;: &quot;4.14.0&quot; 写入 dependencies )</li><li><code>npm shrinkwrap</code>（产生一个 npm-shrinkwrap.json，里面包含了通过 node_modules 计算出的模块的依赖树及版本，应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层））</li></ul></li>",1),g=s("h3",{id:"hello-express",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hello-express","aria-hidden":"true"},"#"),n(" Hello, Express")],-1),b=a(`<li><p>初始化一个 Express 项目</p><ul><li>安装<code>npm i express@4.14.0 --save</code></li><li>新建<code>index.js</code>，生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 node index，打开浏览器访问 localhost:3000 时，页面应显示 hello, express。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;hello, express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>supervisor（监听 node 和 js 后缀的文件每次修改代码保存后，自动重启程序）</p><ul><li>安装<code>npm i -g supervisor</code></li><li>运行<code>supervisor index</code>启动程序</li></ul></li><li><p>路由（express 使用了<code>path-to-regexp</code>模块实现的路由匹配）</p><ul><li><p><code>req.params</code>解析 url 中的占位符，如<code>/users/123</code>，挂载路径写作<code>/users/:name</code></p></li><li><p><code>req.query</code>解析后的 url 中的 querystring，如<code>/users?name=Tom</code>，挂载路径写作<code>/users</code></p></li><li><p><code>req.body</code>解析后请求体，需使用相关的模块，如<code>body-parser</code>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code></p></li><li><p><code>express.Router()</code> 我们将 / 和 /users/:name 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 app.use 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/user&#39;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> userRouter<span class="token punctuation">)</span>
<span class="token operator">...</span>

<span class="token comment">// routes/user.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello, &#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,3),h=s("p",null,"模板引擎",-1),x={href:"https://www.npmjs.com/package/ejs",target:"_blank",rel:"noopener noreferrer"},f=a(`<ul><li>通过 app.set 设置模板引擎为 ejs 和存放模板的目录<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
···
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;views&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;views&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 设置存放模板文件的目录</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token comment">// 设置模板引擎为 ejs</span>
···
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>新建 views/user.ejs 模板文件<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">&quot;text/css&quot;</span><span class="token operator">&gt;</span>
      body <span class="token punctuation">{</span><span class="token literal-property property">padding</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>font<span class="token operator">:</span> 14px <span class="token string">&quot;Lucida Grande&quot;</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> name <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>修改路由 routes/user.js 通过调用 res.render 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/user.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。res.render 的作用就是将模板和数据结合生成 html，同时设置响应头中的 Content-Type: text/html，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;user:&#39;</span><span class="token operator">+</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">&gt;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出；<code>&lt;%= code %&gt;</code>：显示转义后的 HTML 内容；<code>&lt;%- code %&gt;</code>：显示原始 HTML 内容<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> name <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token string">&#39;&lt;h1&gt;hello&lt;/h1&gt;&#39;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token string">&#39;&lt;h1&gt;hello&lt;/h1&gt;&#39;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> aaa<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> aaa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>显示效果<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">HAHA123</span>
hello<span class="token punctuation">,</span> haha123
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
hello
<span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),j=a(`<li>includes 我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。 <ul><li>views/header.ejs<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">&quot;text/css&quot;</span><span class="token operator">&gt;</span>
      body <span class="token punctuation">{</span><span class="token literal-property property">padding</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>font<span class="token operator">:</span> 14px <span class="token string">&quot;Lucida Grande&quot;</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>views/footer.ejs<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>views/users.ejs<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> name <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&#39;footer&#39;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),q=s("p",null,"Express 浅析",-1),_=a(`<li><p>中间件与 next（中间件的加载顺序很重要！）</p><blockquote><p>express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 connect- 开头，如 connect-mongo）仍可结合 express 使用。</p></blockquote><ul><li><p>express 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 next() 传递给下一个中间件，如果没有调用 next()，则请求不会往下传递</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 app.use 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 next(error)，则会返回错误而不会传递到下一个中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),y={href:"http://expressjs.com/en/guide/error-handling.html",target:"_blank",rel:"noopener noreferrer"},w=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//错误处理</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Something broke!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=s("h3",{id:"一个简单的博客",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一个简单的博客","aria-hidden":"true"},"#"),n(" 一个简单的博客")],-1),L=a(`<li><p>开发环境</p><ul><li>Node.js: 8.9.1</li><li>MongoDB: 3.4.10</li><li>Express: 4.16.2</li></ul></li><li><p>准备工作</p><ul><li>目录结构 <ul><li>models: 存放操作数据库的文件</li><li>public: 存放静态文件，如样式、图片等</li><li>routes: 存放路由文件</li><li>views: 存放模板文件</li><li>index.js: 程序主文件</li><li>package.json: 存储项目名、描述、作者、依赖等等信息</li></ul></li><li>安装依赖模块 <ul><li>运行以下命令安装所需模块：<div class="language-base line-numbers-mode" data-ext="base"><pre class="language-base"><code>npm i config-lite connect-flash connect-mongo ejs express express-formidable express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>express: web 框架</li><li>express-session: session 中间件</li><li>connect-mongo: 将 session 存储于 mongodb，结合 express-session 使用</li><li>connect-flash: 页面通知的中间件，基于 session 实现 ejs: 模板</li><li>express-formidable: 接收表单及文件上传的中间件</li><li>config-lite: 读取配置文件</li><li>marked: markdown 解析</li><li>moment: 时间格式化</li><li>mongolass: mongodb 驱动</li><li>objectid-to-timestamp: 根据 ObjectId 生成时间戳</li><li>sha1: sha1 加密，用于密码加密</li><li>winston: 日志</li><li>express-winston: express 的 winston 日志中间件</li></ul></li></ul></li><li>ESLint 是一个代码规范和语法错误检查工具。使用 ESLint 可以规范我们的代码书写，可以在编写代码期间就能发现一些低级错误。 <ul><li>ESLint 需要结合编辑器或 IDE 使用 <ul><li>Sublime Text 需要装两个插件：SublimeLinter + SublimeLinter-contrib-eslint</li><li>VS Code 需要装一个插件：ESLint</li></ul></li><li>全局安装 eslint <code>npm i eslint -g</code></li><li>运行 <code>eslint --init</code>初始化 eslint 配置，依次选择（注意：如果 Windows 用户使用其他命令行工具无法上下切换选项，切换回 cmd）： <ul><li>Use a popular style guide</li><li>Standard</li><li>JSON eslint 会创建一个 .eslintrc.json 的配置文件，同时自动安装并添加相关的模块到 devDependencies。这里我们使用 Standard 规范，其主要特点是不加分号。</li></ul></li></ul></li></ul></li><li><p>配置文件</p><ul><li><a href="config-lite">config-lite</a> 是一个轻量的读取配置文件的模块，会根据环境变量（NODE_ENV）的不同加载 config 目录下不同的配置文件，支持 .js、.json、.node、.yml、.yaml 后缀的文件。 <ul><li>在 myblog 下新建 config 目录，在该目录下新建 default.js<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">//程序启动要监听的端口号</span>
  <span class="token literal-property property">session</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//express-session 的配置信息</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&quot;myblog&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;myblog&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">2592000000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//mongodb 的地址，以 mongodb:// 协议开头，myblog 为 db 名</span>
  <span class="token literal-property property">mongodb</span><span class="token operator">:</span> <span class="token string">&quot;mongodb://localhost:27017/myblog&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li>`,3),S=s("p",null,"功能设计",-1),N=a(`<li><p>功能与路由设计</p><ul><li>分为页面和接口，通过简单的<code>&lt;a&gt;(GET)</code>和<code>&lt;form&gt;(POST)</code>与后端进行交互，如： <ul><li>登录页：GET /signin</li><li>登录：POST /signin</li></ul></li><li>Restful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。 <ul><li>如上面删除文章的路由设计<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">GET</span> <span class="token operator">/</span>posts<span class="token operator">/</span><span class="token operator">:</span>postId<span class="token operator">/</span>remove
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>Restful 风格的设计<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DELETE</span> <span class="token operator">/</span>posts<span class="token operator">/</span><span class="token operator">:</span>postId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>会话 由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是会话（Session）。</p><ul><li>cookie 与 session 的区别 <ul><li>cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）</li><li>通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中</li><li>session 更安全，cookie 可以直接在浏览器查看甚至编辑</li></ul></li><li>通过引入 express-session 中间件实现对会话的支持：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 {}，当我们登录后设置 req.session.user = 用户信息，返回浏览器的头信息中会带上 set-cookie 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 req.session.user</li></ul></li>`,2),T=s("p",null,"页面通知",-1),D={href:"https://www.npmjs.com/package/connect-flash",target:"_blank",rel:"noopener noreferrer"},R=s("li",null,[n("express-session、connect-mongo 和 connect-flash 的区别与联系 "),s("ul",null,[s("li",null,"express-session: 会话（session）支持中间件"),s("li",null,"connect-mongo: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 connect-redis"),s("li",null,"connect-flash: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用")])],-1),B=a(`<li><p>权限控制</p><ul><li><p>创建检查用户状态中间件，在 myblog 下新建 middlewares 目录，在该目录下新建 check.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//middlewares/check.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">checkLogin</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&quot;/signin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">checkNotLogin</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">checkNotLogin</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;已登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&quot;back&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回之前的页面</span>
    <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>checkLogin: 当用户信息（req.session.user）不存在，即认为用户没有登录，则跳转到登录页，同时显示 未登录 的通知，用于需要用户登录才能操作的页面</li><li>checkNotLogin: 当用户信息（req.session.user）存在，即认为用户已经登录，则跳转到之前的页面，同时显示 已登录 的通知，如已登录用户就禁止访问登录、注册页面</li></ul></li></ul></li>`,1);function C(H,M){const e=o("ExternalLinkIcon");return l(),c("div",null,[r,s("blockquote",null,[s("p",null,[n("参考"),s("a",u,[n("一起学 Node.js"),t(e)]),n("，使用 Express + MongoDB 搭建多人博客")])]),k,s("ul",null,[d,s("li",null,[s("a",v,[n("Promise"),t(e)])]),m]),g,s("ul",null,[b,s("li",null,[h,s("ul",null,[s("li",null,[s("a",x,[n("ejs"),t(e)]),f]),j])]),s("li",null,[q,s("ul",null,[_,s("li",null,[s("p",null,[n("错误处理 "),s("a",y,[n("官方文档"),t(e)])]),w])])])]),E,s("ul",null,[L,s("li",null,[S,s("ul",null,[N,s("li",null,[T,s("ul",null,[s("li",null,[s("a",D,[n("connect-flash"),t(e)]),n(" 是基于 session 实现的，设置初始值 req.session.flash={}，通过 req.flash(name, value) 设置这个对象下的字段和值，通过 req.flash(name) 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。")]),R])]),B])])])])}const P=p(i,[["render",C],["__file","使用Express、MongoDB搭建多人博客.html.vue"]]);export{P as default};
