import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-5866ffd3.js";const i={},r=n("h1",{id:"redux-笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redux-笔记","aria-hidden":"true"},"#"),s(" Redux 笔记")],-1),u=n("h3",{id:"react-js-小书",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-js-小书","aria-hidden":"true"},"#"),s(" React.js 小书")],-1),k={href:"http://huziketang.com/books/react/lesson30",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>Redux，一种新型的前端“架构模式”（Flux 架构的一种变种），它不关注你到底用什么库，你可以把它应用到 React 和 Vue，甚至跟 jQuery 结合都没有问题。</p><p>Redux 和 React-redux 并不是同一个东西，React-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库，就是 Redux 架构在 React.js 中的体现。</p><p>reducer 文件编写格式参考：</p><ol><li>定义 action types</li><li>编写 reducer</li><li>跟这个 reducer 相关的 action creators</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// action types</span>
<span class="token keyword">const</span> <span class="token constant">INIT_COMMENTS</span> <span class="token operator">=</span> <span class="token string">&quot;INIT_COMMENTS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ADD_COMMENT</span> <span class="token operator">=</span> <span class="token string">&quot;ADD_COMMENT&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DELETE_COMMENT</span> <span class="token operator">=</span> <span class="token string">&quot;DELETE_COMMENT&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// reducer</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">INIT_COMMENTS</span><span class="token operator">:</span>
      <span class="token comment">// 初始化评论</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">comments</span><span class="token operator">:</span> action<span class="token punctuation">.</span>comments <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ADD_COMMENT</span><span class="token operator">:</span>
      <span class="token comment">// 新增评论</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>comments<span class="token punctuation">,</span> action<span class="token punctuation">.</span>comment<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">DELETE_COMMENT</span><span class="token operator">:</span>
      <span class="token comment">// 删除评论</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token operator">...</span>state<span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>commentIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token operator">...</span>state<span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>commentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// action creators</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initComments</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">comments</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">INIT_COMMENTS</span><span class="token punctuation">,</span> comments <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">ADD_COMMENT</span><span class="token punctuation">,</span> comment <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deleteComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">commentIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">DELETE_COMMENT</span><span class="token punctuation">,</span> commentIndex <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redux-莞式教程" tabindex="-1"><a class="header-anchor" href="#redux-莞式教程" aria-hidden="true">#</a> Redux 莞式教程</h3>`,6),m={href:"https://github.com/kenberkeley/redux-simple-tutorial",target:"_blank",rel:"noopener noreferrer"},v=e(`<ul><li>state 是应用的状态，一般本质上是一个普通对象</li><li>store 是应用状态 state 的管理者，包含下列四个函数 <ul><li>getState() # 获取整个 state</li><li>dispatch(action) # ※ 触发 state 改变的【唯一途径】※</li><li>subscribe(listener) # 您可以理解成是 DOM 中的 addEventListener</li><li>replaceReducer(nextReducer) # 一般在 Webpack Code-Splitting 按需加载的时候用</li></ul></li></ul><p>二者的关系是：state = store.getState()</p><p>Redux 规定，一个应用只应有一个单一的 store，其管理着唯一的应用状态 state Redux 还规定，不能直接修改应用的状态 state，也就是说，下面的行为是不允许的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
state<span class="token punctuation">.</span>counter <span class="token operator">=</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 禁止在业务逻辑中直接修改 state</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>若要改变 state，必须 dispatch 一个 action，这是修改应用状态的不二法门</strong></p><blockquote><p>现在您只需要记住 action 只是一个包含 type 属性的普通对象即可 例如 { type: &#39;INCREMENT&#39; }</p></blockquote><p>想生成一个 store，我们需要调用 Redux 的 createStore：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span> <span class="token comment">// store 是靠传入 reducer 生成的哦！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>现在您只需要记住 reducer 是一个 函数，负责更新并返回一个新的 state 而 initialState 主要用于前后端同构的数据同步（详情请关注 React 服务端渲染）</p></blockquote>`,9);function b(y,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,u,n("p",null,[n("a",k,[s("React.js 小书"),t(a)])]),d,n("p",null,[n("a",m,[s("Redux 莞式教程"),t(a)]),s(" 本教程深入浅出，配套入门、进阶源码解读以及文档注释丰满的 Demo 等一条龙服务")]),v])}const h=p(i,[["render",b],["__file","Redux笔记.html.vue"]]);export{h as default};
