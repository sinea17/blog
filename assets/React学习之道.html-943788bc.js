import{_ as t,M as p,p as e,q as o,R as n,t as c,N as l,a1 as s}from"./framework-5866ffd3.js";const i={},r=s(`<h1 id="react-学习之道" tabindex="-1"><a class="header-anchor" href="#react-学习之道" aria-hidden="true">#</a> React 学习之道</h1><h4 id="模块热替换" tabindex="-1"><a class="header-anchor" href="#模块热替换" aria-hidden="true">#</a> 模块热替换</h4><p>模块热替换（HMR）可以让浏览器重新加载应用的工具，并且无需让浏览器刷新页面。在入口文件 index.js 配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span><span class="token punctuation">{</span>
	module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h4><ol><li>一个普通的函数表达式总会定义它自己的 this 对象。但是箭头函数表达式仍然会使用包含它的语境 下的 this 对象。</li><li>如果函数只有一个参数，你就可以移除掉参数的括号，但是如果有多个参数，你就必须保留这个括号。</li><li>在 ES6 的箭头函数中，你可以用简洁函数体来替换块状函数体（用花括号包含的内容），简洁函数体的返回不用显示声明。这样你就可以移除掉函数的 return 表达式。（最后函数声明表达式、花括号和返回声明都被省略了）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//块状函数体</span>
<span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>objectID<span class="token punctuation">}</span><span class="token operator">&gt;</span>
            <span class="token operator">...</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//简洁函数体</span>
<span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span>
    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>objectID<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">...</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="es6-结构" tabindex="-1"><a class="header-anchor" href="#es6-结构" aria-hidden="true">#</a> ES6 结构</h4><p>在 JavaScript ES6 中有一种更方便的方法来访问对象和数组的属性，叫做解构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstname</span><span class="token operator">:</span> <span class="token string">&quot;Robin&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastname</span><span class="token operator">:</span> <span class="token string">&quot;Wieruch&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ES5</span>
<span class="token keyword">var</span> firstname <span class="token operator">=</span> user<span class="token punctuation">.</span>firstname<span class="token punctuation">;</span>
<span class="token keyword">var</span> lastname <span class="token operator">=</span> user<span class="token punctuation">.</span>lastname<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstname <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ES6</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> firstname<span class="token punctuation">,</span> lastname <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstname <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ES6默认参数</span>
<span class="token comment">//若没有指定 className 属性，它的值就是一个空字符串，而非 undefined</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> className <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件内部状态" tabindex="-1"><a class="header-anchor" href="#组件内部状态" aria-hidden="true">#</a> 组件内部状态</h4><p>调用 super(props); ，它会在你的构造函数中设置 this.props 以供在构造函数中<br> 访问它们。否则当在构造函数中访问 this.props ，会得到 undefined 。</p><h4 id="内联样式-inline-style" tabindex="-1"><a class="header-anchor" href="#内联样式-inline-style" aria-hidden="true">#</a> 内联样式(inline-style)</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//值为对象，所以双花括号{{}}</span>
<span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;10%&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token comment">//or 元素之外定义一个 style 对象</span>
<span class="token keyword">const</span> testWidth <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;10%&#39;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span>testWidth<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h4>`,15),u={href:"https://www.robinwieruch.de/conditional-rendering-react/",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>&amp;&amp; 逻辑运算符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">LoadingIndicator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoading <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三元运算（多条件注意拆分）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> item<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isEditMode <span class="token operator">=</span> mode <span class="token operator">===</span> <span class="token string">&quot;EDIT&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>isEditMode <span class="token operator">?</span> <span class="token operator">&lt;</span>ItemEdit item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>ItemView item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//==========or</span>
<span class="token keyword">function</span> <span class="token function">LoadingIndicator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoading <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch...case</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Notification</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text<span class="token punctuation">,</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;info&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>Info text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;warning&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>Warning text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;error&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>Error text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键值对</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Notification</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text<span class="token punctuation">,</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Info text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">warning</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Warning text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Error text<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="es6-模块-import-export" tabindex="-1"><a class="header-anchor" href="#es6-模块-import-export" aria-hidden="true">#</a> ES6 模块：import Export</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> firstname <span class="token operator">=</span> <span class="token string">&quot;robin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lastname <span class="token operator">=</span> <span class="token string">&quot;wieruch&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> firstname<span class="token punctuation">,</span> lastname <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> firstname<span class="token punctuation">,</span> lastname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./file1.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//robin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对象方式导入全部变量 同时使用别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> person <span class="token keyword">from</span> <span class="token string">&quot;./file1.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//robin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>单个变量导入使用别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> firstname <span class="token keyword">as</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./file1.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//robin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>default 语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> robin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstname</span><span class="token operator">:</span> <span class="token string">&quot;robin&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastname</span><span class="token operator">:</span> <span class="token string">&quot;wieruch&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> robin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> developer <span class="token keyword">from</span> <span class="token string">&quot;./file1.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>developer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ firstname: &#39;robin&#39;, lastname: &#39;wieruch&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多重混合导出导入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> firstname <span class="token operator">=</span> <span class="token string">&quot;robin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lastname <span class="token operator">=</span> <span class="token string">&quot;wieruch&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  firstname<span class="token punctuation">,</span>
  lastname<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> firstname<span class="token punctuation">,</span> lastname <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> developer<span class="token punctuation">,</span> <span class="token punctuation">{</span> firstname<span class="token punctuation">,</span> lastname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./file1.js&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>developer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: { firstname: &#39;robin&#39;, lastname: &#39;wieruch&#39; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: robin wieruch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接导出变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> firstname <span class="token operator">=</span> <span class="token string">&quot;robin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> lastname <span class="token operator">=</span> <span class="token string">&quot;wieruch&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function k(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[n("a",u,[c("react 条件渲染的多种方法"),l(a)])]),d])}const g=t(i,[["render",k],["__file","React学习之道.html.vue"]]);export{g as default};
