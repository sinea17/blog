import{_ as o,M as p,p as t,q as c,R as n,t as s,N as e,a1 as l}from"./framework-5866ffd3.js";const i={},r=n("h1",{id:"mongodb-笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-笔记","aria-hidden":"true"},"#"),s(" MongoDB 笔记")],-1),u=n("p",null,"参考文章",-1),d={href:"https://cnodejs.org/topic/5829631dd3abab717d8b4c2c",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.csdn.net/u011368551/article/details/52149921",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>笔记</p><ul><li><p>bodyParser 是 HTTP 请求体解析中间件</p><ul><li>配置使用 <code>app.use(bodyParser.json());</code></li></ul></li><li><p>router 路由</p><ul><li>配置使用 <code>app.use(&#39;/&#39;, router);</code></li></ul></li><li><p>mongoose MongoDB 对象建模工具</p><ul><li><p>Schema 定义数据表及表内字段，生成数据模型，可以称之为数据库模型骨架，不具备数据库的操作能力。Schema 支持的数据类型有<code>String Number Date Buffer Boolean Mixed Objectid Array</code>具体实现如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>
<span class="token comment">// 开始定义Schema</span>
<span class="token keyword">var</span> phoneSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">device</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//设备名称</span>
  <span class="token literal-property property">isSmart</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">//是否为智能手机</span>
  <span class="token literal-property property">releaseTime</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token comment">//发布时间</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token comment">//售价</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//手机中安装的App名称,是数组</span>
  <span class="token literal-property property">manufacturer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//手机厂商</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//厂商名称</span>
    <span class="token literal-property property">country</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//厂商国籍</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Model 是由 Schema 发布生成的模型，具有抽象属性和行为的数据库操作，将该 Schema 发布为 Model：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> phoneModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> phoneSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果该Model已经发布，则可以直接通过名字索引到，如下：</span>
<span class="token keyword">var</span> phoneModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果没有发布，上一段代码将会异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Entity 是由 Model 创建的实体，他的操作也会影响数据库，用 Model 创建 Entity：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> phoneEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">phoneModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">device</span><span class="token operator">:</span> <span class="token string">&quot;iphoneⅩ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打印这个实体的名字看看</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phoneEntity<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//iphoneⅩ</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Tips: 以上三者关系，Schema 生成 Model，Model 创造 Entity，Model 和 Entity 都可对数据库操作造成影响，但 Model 比 Entity 更具操作性。</p></li></ul></li></ul><p>启动 mongodb 数据库（在<code>MongoDB\\bin</code>目录下操作）</p><ol><li>启动<code>mongod --dbpath d:/MongoDB/data/db</code></li><li>连接<code>mongo</code></li></ol>`,4);function v(b,g){const a=p("ExternalLinkIcon");return t(),c("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("用 Node 和 Express 打造 restful API"),e(a)])]),n("li",null,[n("a",k,[s("Mongoose 学习参考文档——基础篇"),e(a)])])]),m])}const y=o(i,[["render",v],["__file","MongoDB笔记.html.vue"]]);export{y as default};
